<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>JSP语法</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="keywords" content="Jcoop,jsp语法">
    <meta name="description" content="jsp语法">
</head>
<body>
<p><font size="4">一个JSP页面由元素和模板数据组成。元素是必须由JSP容器处理的部分，而模板数据是JSP容器不处理的部分，例如，JSP页面中的HTML内容，这些内容会直接发送到客户端。在JSP2.0规范中，元素有三种类型：指令元素、脚本元素和动作元素。</font></p><h3><a name="_Toc121640000"></a>12.3.1 指令元素（directive elements）</h3><p><font size="4">指令元素主要用于为转换阶段提供整个JSP页面的相关信息，指令不会产生任何的输出到当前的输出流中。指令元素的语法形式如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%@ directive { attr=&quot;value&quot; }* %&gt;</font></p><p><font size="4">在起始符号&lt;%@之后和结束符号%&gt;之前，可以加空格，也可以不加，但是要注意的是，在起始符号中的&lt;和%之间、%和@之间，以及结束符号中的%和&gt;之间不能有任何的空格。指令元素有三种指令：page，include和taglib。</font></p><h4><a name="_Toc121640001"><font size="4">1</font></a><font size="4">．page指令</font></h4><p><font size="4">page指令作用于整个JSP页面，定义了许多与页面相关的属性，这些属性将被用于和JSP容器通信。page指令的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%@ page attr1=&quot;value1&quot; attr2=&quot;value2&quot; &hellip; %&gt;</font></p><p><font size="4">在JSP规范中，还提供了XML语法格式的page指令（参见12.8节），如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:directive.page attr1=&quot;value1&quot; attr2=&quot;value2&quot; &hellip;/&gt;</font></p><p><font size="4">page指令有13个属性，如下所示：</font></p><h5><font size="4">? language=&quot;scriptingLanguage&quot;</font></h5><p><font size="4">该属性用于指定在脚本元素中使用的脚本语言，默认值是java。在JSP2.0规范中，该属性的值只能是java，以后可能会支持其他语言，例如，C、C++等。</font></p><h5><font size="4">? extends=&quot;className&quot;</font></h5><p><font size="4">该属性用于指定JSP页面转换后的Servlet类从哪一个类继承，属性的值是完整的限定类名。通常不需要使用这个属性，JSP容器会提供转换后的Servlet类的父类。使用该属性时要格外小心，因为这可能会限制JSP容器为提升性能所做出的努力。</font></p><h5><font size="4">? import=&quot;importList&quot;</font></h5><p><font size="4">该属性用于指定在脚本环境中可以使用的Java类。属性的值和Java程序中的import声明类似，该属性的值是以逗号分隔的导入列表，例如：</font></p><p><font size="4">&lt;%@ page import=&quot;java.util.Vector,java.io.*&quot; %&gt;</font></p><p><font size="4">也可以重复设置import属性：</font></p><p><font size="4">&lt;%@ page import=&quot;java.util.Vector&quot; %&gt;</font></p><p><font size="4">&lt;%@ page import=&quot;java.io.*&quot; %&gt;</font></p><p><font size="4">要注意的是，page指令中只有import属性可以重复设置。import 默认导入的列表是：java.lang.*，javax.servlet.*，javax.servlet.jsp.*和javax.servlet.http.*。</font></p><h5><font size="4">? session=&quot;true|false&quot;</font></h5><p><font size="4">该属性用于指定在JSP页面中是否可以使用session对象，默认值是true。</font></p><h5><font size="4">? buffer=&quot;none|sizekb&quot;</font></h5><p><font size="4">该属性用于指定out对象（类型为JspWriter）使用的缓冲区大小，如果设置为none，将不使用缓冲区，所有的输出直接通过ServletResponse的PrintWriter对象写出。设置该属性的值只能以kb为单位，默认值是8kb。</font></p><h5><font size="4">? autoFlush=&quot;true|false&quot;</font></h5><p><font size="4">该属性用于指定当缓冲区满的时候，缓存的输出是否应该自动刷新。如果设置为false，当缓冲区溢出的时候，一个异常将被抛出。默认值为true。</font></p><h5><font size="4">? isThreadSafe=&quot;true|false&quot;</font></h5><p><font size="4">该属性用于指定对JSP页面的访问是否是线程安全的。如果设置为true，则向JSP容器表明这个页面可以同时被多个客户端请求访问。如果设置为false，则JSP容器将对转换后的Servlet类实现SingleThreadModel接口。由于SingleThreadModel接口在Servlet2.4规范中已经声明为不赞成使用，所以该属性也建议不要再使用。默认值是true。</font></p><h5><font size="4">? info=&quot;info_text&quot;</font></h5><p><font size="4">该属性用于指定页面的相关信息，该信息可以通过调用Servlet接口的getServletInfo()方法来得到。</font></p><h5><font size="4">? errorPage=&quot;error_url&quot;</font></h5><p><font size="4">该属性用于指定当JSP页面发生异常时，将转向哪一个错误处理页面。要注意的是，<strong>如果一个页面通过使用该属性定义了错误页面，那么在</strong><strong>web.xml</strong><strong>文件中定义的任何错误页面将不会被使用。</strong></font></p><h5><font size="4">? isErrorPage=&quot;true|false&quot;</font></h5><p><font size="4">该属性用于指定当前的JSP页面是否是另一个JSP页面的错误处理页面。默认值是false。</font></p><h5><font size="4">? contentType=&quot;ctinfo&quot;</font></h5><p><font size="4">该属性指定用于响应的JSP页面的MIME类型和字符编码。例如：</font></p><p><font size="4">&lt;%@ page contentType=&quot;text/html; charset=gb2312&quot; %&gt;</font></p><h5><font size="4">? pageEncoding=&quot;peinfo&quot;</font></h5><p><font size="4">该属性指定JSP页面使用的字符编码。如果设置了这个属性，则JSP页面的字符编码使用该属性指定的字符集，如果没有设置这个属性，则JSP页面使用contentType属性指定的字符集，如果这两个属性都没有指定，则使用字符集&ldquo;ISO-8859-1&rdquo;。</font></p><h5><font size="4">? isELIgnored=&quot;true|false&quot;</font></h5><p><font size="4">该属性用于定义在JSP页面中是否执行或忽略EL表达式。如果设置为true，EL表达式（关于EL表达式，请参见第16章）将被容器忽略，如果设置为flase，EL表达式将被执行。默认的值依赖于web.xml的版本，对于一个Web应用程序中的JSP页面，如果其中的web.xml文件使用Servlet2.3或之前版本的格式，则默认值是true，如果使用Servlet2.4版本的格式，则默认值是false。对应于该属性的JSP配置元素是&lt;el-ignored&gt;（参见附录D的D.15节）。</font></p><div style="BORDER-RIGHT: #e0e0e0 1pt solid; PADDING-RIGHT: 4pt; BORDER-TOP: #e0e0e0 1pt solid; PADDING-LEFT: 4pt; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 1pt; BORDER-LEFT: #e0e0e0 1pt solid; PADDING-TOP: 1pt; BORDER-BOTTOM: #e0e0e0 1pt solid"><p style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: medium none; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; PADDING-TOP: 0cm; BORDER-BOTTOM: medium none"><font size="4">注意：无论将page指令放在JSP文件的哪个位置，它的作用范围都是整个JSP页面，然而，为了JSP程序的可读性，以及养成良好的编程习惯，我们应该将page指令放在JSP文件的顶部。</font></p></div><h4 style="PAGE-BREAK-BEFORE: always"><a name="_Toc121640002"><font size="4">2</font></a><font size="4">．include指令</font></h4><p><font size="4">include指令用于在JSP页面中静态包含一个文件，该文件可以是JSP页面、HTML网页、文本文件或一段Java代码。使用了include指令的JSP页面在转换时，JSP容器会在其中插入所包含文件的文本或代码。include指令的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%@ include file=&quot;relativeURLspec&quot; %&gt;</font></p><p><font size="4">XML语法格式的include指令如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:directive.include file=&quot;relativeURLspec&quot;/&gt;</font></p><p><font size="4">file属性的值被解释为相对于当前JSP文件的URL。</font></p><p><font size="4">例12-3是一个使用include指令的例子。</font></p><p><font size="4">例12-3</font></p><div style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: gray 1pt solid; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; PADDING-TOP: 1pt; BORDER-BOTTOM: medium none"><p style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: medium none; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; PADDING-TOP: 0cm; BORDER-BOTTOM: medium none; TEXT-ALIGN: center" align="center"><font size="4">greeting.jsp</font></p></div><p><font size="4">&lt;%@ page contentType=&quot;text/html;charset=gb2312&quot; %&gt;</font></p><p><font size="4"></font></p><p><font size="4">&lt;html&gt;</font></p><p><font size="4">&lt;head&gt;&lt;title&gt;欢迎你&lt;/title&gt;&lt;/head&gt;</font></p><p><font size="4">&lt;/html&gt;</font></p><p><font size="4">&lt;body&gt;</font></p><p><font size="4">欢迎你，现在的时间是</font></p><p><font size="4">&lt;%@ include file=&quot;date.jsp&quot; %&gt;</font></p><p><font size="4">&lt;/body&gt;</font></p><p><font size="4">&lt;/html&gt;</font></p><p><font size="4"></font></p><p style="TEXT-ALIGN: center" align="center"><font size="4">date.jsp</font></p><p><font size="4">&lt;%</font></p><p><font size="4">out.println(new java.util.Date().toLocaleString());</font></p><div style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: medium none; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 1pt; BORDER-LEFT: medium none; PADDING-TOP: 0cm; BORDER-BOTTOM: gray 1pt solid"><p style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: medium none; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; PADDING-TOP: 0cm; BORDER-BOTTOM: medium none"><font size="4">%&gt;</font></p></div><p><font size="4">访问greeting.jsp页面，将输出下面的信息：</font></p><p><font size="4">欢迎你，现在的时间是 2005-3-29 16:12:22</font></p><div style="BORDER-RIGHT: #e0e0e0 1pt solid; PADDING-RIGHT: 4pt; BORDER-TOP: #e0e0e0 1pt solid; PADDING-LEFT: 4pt; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 1pt; BORDER-LEFT: #e0e0e0 1pt solid; PADDING-TOP: 1pt; BORDER-BOTTOM: #e0e0e0 1pt solid"><p style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: medium none; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; PADDING-TOP: 0cm; BORDER-BOTTOM: medium none"><font size="4">注意：在被包含的文件中最好不要使用&lt;html&gt;、&lt;/html&gt;、&lt;body&gt;、&lt;/body&gt;等标签，因为这会影响到原JSP文件中同样的标签，有时会导致错误。另外，因为原文件和被包含的文件可以互相访问彼此定义的变量和方法，所以在包含文件时要格外小心，避免在被包含的文件中定义了同名的变量和方法，而导致转换时出错；或者不小心修改了另外文件中的变量值，而导致出现不可预料的结果。</font></p></div><h4><a name="_Toc121640003"><font size="4">3</font></a><font size="4">．taglib指令</font></h4><p><font size="4">tablib指令允许页面使用用户定制的标签（参见第15章）。tablib指令的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%@ taglib (uri=&quot;tagLibraryURI&quot; | tagdir=&quot;tagDir&quot;) prefix=&quot;tagPrefix&quot; %&gt;</font></p><p><font size="4">XML语法格式的taglib指令如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:directive.tablib (uri=&quot;tagLibraryURI&quot; | tagdir=&quot;tagDir&quot;) prefix=&quot;tagPrefix&quot;/&gt;</font></p><p><font size="4">taglib指令有三个属性：</font></p><h5><font size="4">? uri</font></h5><p><font size="4">该属性惟一地标识和前缀（prefix）相关的标签库描述符，可以是绝对或者相对的URI。这个URI被用于定位标签库描述符的位置。</font></p><h5 style="PAGE-BREAK-BEFORE: always"><font size="4">? tagdir</font></h5><p><font size="4">该属性指示前缀（prefix）将被用于标识安装在/WEB-INF/tags/目录或其子目录下的标签文件（参见第18章）。一个隐含的标签库描述符被使用。下面三种情况将发生转换（translation）错误：</font></p><p><font size="4">&mdash; 属性的值不是以/WEB-INF/tags/开始。</font></p><p><font size="4">&mdash; 属性的值没有指向一个已经存在的目录。</font></p><p><font size="4">&mdash; 该属性与uri属性一起使用。</font></p><h5><font size="4">? prefix</font></h5><p><font size="4">定义一个prefix:tagname形式的字符串前缀，用于区分多个自定义标签。<strong>以</strong><strong>jsp:</strong><strong>，</strong><strong>jspx:</strong><strong>，</strong><strong>java:</strong><strong>， </strong><strong>javax:</strong><strong>，</strong><strong>servlet:</strong><strong>，</strong><strong>sun:</strong><strong>和sunw:</strong><strong>开始的前缀被保留。前缀的命名必须遵循XML</strong><strong>名称空间的命名约定。在JSP2.0</strong><strong>规范中，空前缀是非法的。</strong></font></p><h3><a name="_Toc121640004"></a>12.3.2 脚本元素（scripting elements）</h3><p><font size="4">脚本元素包括三个部分：声明、脚本段和表达式。JSP2.0增加了EL表达式（参见第16章），作为脚本元素的另一个选择。声明脚本元素用于声明在其他脚本元素中可以使用的变量和方法，脚本段是一段Java代码，用于描述在对请求的响应中要执行的动作，表达式脚本元素是Java语言中完整的表达式，在响应请求时被计算，计算的结果将被转换为字符串，插入到输出流中。</font></p><p><font size="4">这三种脚本元素都是基于&lt;%的语法，如下所示：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%! this is a declaration %&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;% this is a scriptlet %&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%= this is an expression %&gt;</font></p><p><font size="4">在&lt;%!、&lt;%和&lt;%=之后，%&gt;之前，可以有空格，但是在&lt;%与!、&lt;%与=之间不能有空格。</font></p><h4><a name="_Toc121640005"><font size="4">1</font></a><font size="4">．声明（declarations）</font></h4><p><font size="4">声明脚本元素用于声明在JSP页面的脚本语言中使用的变量和方法。声明必须是完整的声明语句，遵照Java语言的语法。声明不会在当前的输出流中产生任何的输出。声明以&lt;%!开始，以%&gt;结束，它的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%! declaration(s) %&gt;</font></p><p><font size="4">XML语法格式的声明如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:declaration&gt; declaration(s) &lt;/jsp:declaration&gt;</font></p><p><font size="4">声明的例子如下：</font></p><p><font size="4">&lt;%! int i; %&gt;</font></p><p><font size="4">&lt;%! int i = 0; %&gt;</font></p><p><font size="4">&lt;%! public String f(int i) { if (i&lt;3) return(&quot;&hellip;&quot;); &hellip; } %&gt;</font></p><p><font size="4">你可以在一个声明中声明多个变量和方法，也可以使用多个声明。在声明变量的时候要注意，不要忘了变量名后面的分号（;），声明只在当前的JSP页面中有效。</font></p><div style="BORDER-RIGHT: #e0e0e0 1pt solid; PADDING-RIGHT: 4pt; BORDER-TOP: #e0e0e0 1pt solid; PADDING-LEFT: 4pt; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 1pt; BORDER-LEFT: #e0e0e0 1pt solid; PADDING-TOP: 1pt; BORDER-BOTTOM: #e0e0e0 1pt solid"><p style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: medium none; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; PADDING-TOP: 0cm; BORDER-BOTTOM: medium none"><font size="4">注意：利用&lt;%! %&gt;声明的变量，在JSP容器转换JSP页面为Servlet类时，将作为该类的实例变量或者类变量（声明时使用了static关键字），在多用户并发访问时，这将导致线程安全的问题，除非你确认是单用户访问或者变量是只读的。关于线程安全的问题，请读者参见第11章。</font></p></div><h4 style="PAGE-BREAK-BEFORE: always"><a name="_Toc121640006"><font size="4">2</font></a><font size="4">．脚本段（scriptlets）</font></h4><p><font size="4">脚本段是在请求处理期间要执行的Java代码段。脚本段可以产生输出，并将输出发送到客户端，也可以是一些流程控制语句。脚本段以&lt;%开始，以%&gt;结束，它的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;% scriptlet %&gt;</font></p><p><font size="4">XML语法格式的脚本段如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:scriptlet&gt; scriptlet &lt;/jsp:scriptlet&gt;</font></p><p><font size="4">脚本段的例子如下：</font></p><p><font size="4">&lt;%</font></p><p><font size="4">if (Calendar.getInstance().get(Calendar.AM_PM) == Calendar.AM) </font></p><p><font size="4">{</font></p><p><font size="4">%&gt;</font></p><p><font size="4">Good Morning</font></p><p><font size="4">&lt;% </font></p><p><font size="4">}</font></p><p><font size="4">else</font></p><p><font size="4">{</font></p><p><font size="4">%&gt;</font></p><p><font size="4">Good Afternoon</font></p><p><font size="4">&lt;% </font></p><p><font size="4">}</font></p><p><font size="4">%&gt;</font></p><p><font size="4">这个例子中，&lt;%和%&gt;之间的部分是脚本段，&ldquo;Good Morning&rdquo;和&ldquo;Good Afternoon&rdquo;是模板数据。为了便于读者理解，下面列出转换后的在_jspService ()方法中的代码片段：</font></p><p><font size="4">if (Calendar.getInstance().get(Calendar.AM_PM) == Calendar.AM)</font></p><p><font size="4">{</font></p><p><font size="4">out.write(&quot;\r\n&quot;);</font></p><p><font size="4">out.write(&quot; Good Morning\r\n&quot;);</font></p><p><font size="4">}</font></p><p><font size="4">else</font></p><p><font size="4">{</font></p><p><font size="4"></font></p><p><font size="4">out.write(&quot;\r\n&quot;);</font></p><p><font size="4">out.write(&quot; Good Afternoon\r\n&quot;); </font></p><p><font size="4">}</font></p><p><font size="4">在脚本段中可以声明本地变量，在后面的脚本段中可以使用该变量，例如：</font></p><p><font size="4">&lt;% int i=0;%&gt;</font></p><p><font size="4">在后面的脚本段中可以访问变量i，如下：</font></p><p><font size="4">&lt;% i++; %&gt;</font></p><p><font size="4">在JSP容器转换JSP页面为Servlet类时，页面中的代码段会按照出现的次序，依次被转换为_jspService()方法中的代码，在脚本段中声明的变量，将成为_jspService()方法中的本地变量，因此，脚本段中的变量是线程安全的。</font></p><h4><a name="_Toc121640007"><font size="4">3</font></a><font size="4">．表达式（expressions）</font></h4><p><font size="4">表达式脚本元素是Java语言中完整的表达式，在请求处理时计算这些表达式，计算的结果将被转换为字符串，插入到当前的输出流中。表达式以&lt;%=开始，以%&gt;结束，它的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%= expression %&gt;</font></p><p><font size="4">XML语法格式的表达式如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:expression&gt; expression &lt;/jsp:expression&gt;</font></p><p><font size="4">表达式的例子如下：</font></p><p><font size="4">&lt;html&gt;</font></p><p><font size="4">&lt;head&gt;&lt;/head&gt;</font></p><p><font size="4">&lt;/html&gt;</font></p><p><font size="4">&lt;body&gt;</font></p><p><font size="4">现在的时间是&lt;%= (new java.util.Date()).toLocaleString() %&gt;</font></p><p><font size="4">&lt;/body&gt;</font></p><p><font size="4">&lt;/html&gt;</font></p><p><strong><font size="4">要注意，在书写表达式的时候，一定不要在表达式后面添加任何的标点符号。</font></strong></p><h3><a name="_Toc121640008"></a>12.3.3 动作元素（action elements）</h3><p><font size="4">动作元素为请求处理阶段提供信息。动作元素遵循XML元素的语法，有一个包含元素名的开始标签，可以有属性、可选的内容、与开始标签匹配的结束标签。动作元素也可以是一个空标签，可以有属性。与XML和XHTML一样，JSP的标签也是区分大小写的。</font></p><p><font size="4">JSP2.0规范定义了一些标准的动作。标准动作是一些标签，它们影响JSP运行时的行为和对客户端请求的响应，这些动作由JSP容器来实现。</font></p><p><font size="4">从效果上来说，一个标准动作是嵌入到JSP页面中的一个标签。在页面被转换为Servlet期间，当JSP容器遇到这个标签，就用预先定义的对应于该标签的Java代码来代替它。动作元素的语法是基于XML的。</font></p><p><font size="4">JSP2.0规范中定义了20个标准的动作元素。</font></p><h4><a name="_Toc121640009"><font size="4">1</font></a><font size="4">．&lt;jsp:useBean&gt;，&lt;jsp:setProperty&gt;和&lt;jsp:getProperty&gt;</font></h4><p><font size="4">这三个动作元素用于访问JavaBean，详细的介绍请参看第13章。</font></p><h4><a name="_Toc121640010"><font size="4">2</font></a><font size="4">．&lt;jsp:param&gt;</font></h4><p><font size="4">这个动作元素被用来以&ldquo;名－值对&rdquo;的形式为其他标签提供附加信息。它和&lt;jsp:include&gt;，&lt;jsp:forward&gt;和&lt;jsp:plugin&gt;一起使用。它的语法为：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:param name=&quot;name&quot; value=&quot;value&quot; /&gt;</font></p><p><font size="4">它有两个必备的属性name和value。</font></p><h5><font size="4">? name</font></h5><p><font size="4">给出参数的名字。</font></p><h5><font size="4">? value</font></h5><p><font size="4">给出参数的值，可以是一个表达式。</font></p><h4><a name="_Toc121640011"><font size="4">3</font></a><font size="4">．&lt;jsp:include&gt;</font></h4><p><font size="4">这个动作元素用于在当前页面中包含静态和动态的资源，一旦被包含的页面执行完毕，请求处理将在调用页面中继续进行。被包含的页面不能改变响应的状态代码或者设置报头，这防止了对类似setCookie()这样的方法的调用，任何对这些方法的调用都将被忽略。这个约束和在javax.servlet. Request Dispatcher类的include()方法上所施加的约束是一样的。</font></p><p><font size="4">&lt;jsp:include&gt;动作的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:include page=&rdquo;urlSpec&rdquo; flush=&quot;true|false&quot;/&gt;</font></p><p><font size="4">或</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:include page=&rdquo;urlSpec&rdquo; flush=&quot;true|false&quot;&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ &lt;jsp:param &hellip;. /&gt; }* </font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;/jsp:include&gt;</font></p><p><font size="4">&lt;jsp:include&gt;动作有两个属性page和flush。</font></p><h5><font size="4">? page</font></h5><p><font size="4">指定被包含资源的相对路径，该路径是相对于当前JSP页面的URL。</font></p><h5><font size="4">? flush</font></h5><p><font size="4">该属性是可选的。如果设置为true，当页面输出使用了缓冲区，那么在进行包含工作之前，先要刷新缓冲区。如果设置为false，则不会刷新缓冲区。该属性的默认值是false。</font></p><p><font size="4">&lt;jsp:include&gt;动作可以在它的内容中包含一个或多个&lt;jsp:param&gt;元素，为包含的页面提供参数信息。被包含的页面可以访问request对象，该对象包含了原始的参数和使用&lt;jsp:param&gt;元素指定的新参数。如果参数的名称相同，原来的值保持不变，新的值其优先级比已经存在的值要高。例如，请求对象中有一个参数为param=value1，然后又在&lt;jsp:param&gt;元素中指定了一个参数param=value2，在被包含的页面中，接收到的参数为param=value2, value1，调用javax.servlet.ServletRequest接口中的getParameter()方法将返回value2，可以使用getParameterValues()返回指定参数的所有值。</font></p><p><font size="4">那么&lt;jsp:include&gt;和include指令有什么区别呢？表12-1列出了两者的区别。</font></p><p><font size="4">表12-1 &lt;jsp:include&gt;和include指令的区别</font></p><div align="center"><table style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; WIDTH: 459.25pt; BORDER-BOTTOM: medium none; BORDER-COLLAPSE: collapse" cellspacing="0" cellpadding="0" width="612" border="1">    <tbody>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 100.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="133">            <p style="TEXT-ALIGN: center" align="center"><font size="4"><sup>语</sup><sup> </sup><sup>法</sup></font></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 70pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="93">            <p style="TEXT-ALIGN: center" align="center"><sup><font size="4">相对路径</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 63.7pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="85">            <p style="TEXT-ALIGN: center" align="center"><sup><font size="4">发生时间</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 57.35pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="76">            <p style="TEXT-ALIGN: center" align="center"><sup><font size="4">包含的对象</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 168.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="224">            <p style="TEXT-ALIGN: center" align="center"><font size="4"><sup>描</sup><sup> </sup><sup>述</sup></font></p>            </td>        </tr>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 100.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="133">            <p><sup><font size="4">&lt;%@ include file=&quot;url&quot; %&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 70pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="93">            <p><sup><font size="4">相对于当前文件</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 63.7pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="85">            <p><sup><font size="4">转换期间</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 57.35pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="76">            <p><sup><font size="4">静态</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 168.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="224">            <p><font size="4"><sup>包含的内容被</sup><sup>JSP</sup><sup>容器分析</sup></font></p>            </td>        </tr>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 100.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="133">            <p><sup><font size="4">&lt;jsp:include page=&quot;url&quot; /&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 70pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="93">            <p><sup><font size="4">相对于当前页面</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 63.7pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="85">            <p><sup><font size="4">请求处理期间</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 57.35pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="76">            <p><sup><font size="4">静态和动态</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 168.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="224">            <p><sup><font size="4">包含的内容不进行分析，但在相应的位置被包含</font></sup></p>            </td>        </tr>    </tbody></table></div><p><font size="4">要注意，表12-1中include指令包含的对象为静态，并不是指include指令只能包含像HTML这样的静态页面，include指令也可以包含JSP页面。所谓静态和动态指的是：include指令将JSP页面作为静态对象，将页面的内容（文本或代码）在include指令的位置处包含进来，这个过程发生在JSP页面的转换阶段。而&lt;jsp:include&gt;动作把包含的JSP页面作为动态对象，在请求处理期间，发送请求给该对象，然后在当前页面对请求的响应中包含该对象对请求处理的结果，这个过程发生在执行阶段（即请求处理阶段）。</font></p><p><font size="4"><strong>include</strong><strong>指令的file</strong><strong>属性所给出的路径是相对于当前文件的，而&lt;jsp:include&gt;</strong><strong>动作的page</strong><strong>属性所给出的路径是相对于当前页面的，要理解相对于当前文件和相对于当前页面的区别，就需要结合include</strong><strong>指令和&lt;jsp:include&gt;</strong><strong>动作对被包含资源的不同处理方式来考虑。</strong></font></p><p><font size="4"><strong>当采用include</strong><strong>指令包含资源时，相对路径的解析在转换期间发生（相对于当前文件的路径来找到资源），资源的内容（文本或代码）在include</strong><strong>指令的位置处被包含进来，成为一个整体，被转换为Servlet</strong><strong>源文件。当采用&lt;jsp:include&gt;</strong><strong>动作包含资源时，相对路径的解析在请求处理期间发生（相对于当前页面的路径来找到资源），当前页面和被包含的资源是两个独立的个体，当前页面将请求发送给被包含的资源，被包含资源对请求处理的结果将作为当前页面对请求响应的一部分发送到客户端。</strong></font></p><p><font size="4">为了更好地理解include指令和&lt;jsp:include&gt;动作包含资源的相对路径，搞清楚相对于当前文件和相对于当前页面的区别，我们给出了表12-2的例子。在这个例子中共用到4个文件：a.jsp，c.jsp，abc/b.jsp和abc/c.jsp。</font></p><p><font size="4">表12-2 在两个文件中分别使用include指令和&lt;jsp:include&gt;动作包含资源的例子</font></p><div align="center"><table style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; WIDTH: 459.25pt; BORDER-BOTTOM: medium none; BORDER-COLLAPSE: collapse" cellspacing="0" cellpadding="0" width="612" border="1">    <tbody>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 162.4pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="217">            <p style="TEXT-ALIGN: center" align="center"><sup><font size="4">a.jsp</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 170.75pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="228">            <p style="TEXT-ALIGN: center" align="center"><sup><font size="4">abc/b.jsp</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 126.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="168">            <p style="TEXT-ALIGN: center" align="center"><font size="4"><sup>结</sup><sup> </sup><sup>果</sup></font></p>            </td>        </tr>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 162.4pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="217">            <p><sup><font size="4">&lt;%@ include file=&quot;abc/b.jsp&quot;%&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 170.75pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="228">            <p><sup><font size="4">&lt;%@ include file=&quot;c.jsp&quot;%&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 126.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="168">            <p><sup><font size="4">abc/c.jsp</font></sup></p>            </td>        </tr>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 162.4pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="217">            <p><sup><font size="4">&lt;jsp:include page=&quot;abc/b.jsp&quot;/&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 170.75pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="228">            <p><sup><font size="4">&lt;jsp:include page=&quot;c.jsp&quot;/&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 126.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="168">            <p><sup><font size="4">abc/c.jsp</font></sup></p>            </td>        </tr>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 162.4pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="217">            <p><sup><font size="4">&lt;jsp:include page=&quot;abc/b.jsp&quot;/&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 170.75pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="228">            <p><sup><font size="4">&lt;%@ include file=&quot;c.jsp&quot;%&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 126.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="168">            <p><sup><font size="4">abc/c.jsp</font></sup></p>            </td>        </tr>        <tr>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; WIDTH: 162.4pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="217">            <p><sup><font size="4">&lt;%@ include file=&quot;abc/b.jsp&quot;%&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 170.75pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="228">            <p><sup><font size="4">&lt;jsp:include page=&quot;c.jsp&quot;/&gt;</font></sup></p>            </td>            <td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: medium none; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; WIDTH: 126.1pt; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid" width="168">            <p><sup><font size="4">c.jsp</font></sup></p>            </td>        </tr>    </tbody></table></div><p><a name="_Toc121640012"><font size="4">在这里，笔者原本想对表12-2</font></a><font size="4">的结果做一个分析，但最终还是决定让读者自己来思考结果，以便更好地理解include指令和&lt;jsp:include&gt;动作包含资源的相对路径。</font></p><div style="BORDER-RIGHT: #e0e0e0 1pt solid; PADDING-RIGHT: 4pt; BORDER-TOP: #e0e0e0 1pt solid; PADDING-LEFT: 4pt; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 1pt; BORDER-LEFT: #e0e0e0 1pt solid; PADDING-TOP: 1pt; BORDER-BOTTOM: #e0e0e0 1pt solid"><p style="BORDER-RIGHT: medium none; PADDING-RIGHT: 0cm; BORDER-TOP: medium none; PADDING-LEFT: 0cm; BACKGROUND: #e0e0e0; PADDING-BOTTOM: 0cm; BORDER-LEFT: medium none; PADDING-TOP: 0cm; BORDER-BOTTOM: medium none"><font size="4">提示：理解表12-2前面以粗体显示的两段话，是对结果进行正确分析的关键。</font></p></div><h4><font size="4">4．&lt;jsp:forward&gt;</font></h4><p><font size="4">这个动作允许在运行时将当前的请求转发给一个静态的资源、JSP页面或者Servlet，请求被转向到的资源必须位于同JSP发送请求相同的上下文环境中。</font></p><p><font size="4">这个动作会终止当前页面的执行，如果页面输出使用了缓冲，在转发请求之前，缓冲区将被清除；如果在转发请求之前，缓冲区已经刷新，将抛出IllegalStateException异常。如果页面输出没有使用缓冲，而某些输出已经发送，那么试图调用&lt;jsp:forward&gt;动作，将导致抛出IllegalStateException异常。这个动作的作用和RequestDispatcher接口的forward()方法的作用是一样的。</font></p><p><font size="4">&lt;jsp:include&gt;动作的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:forward page=&quot;relativeURLspec&quot;/&gt;</font></p><p><font size="4">或</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:forward page=&rdquo;urlSpec&rdquo;&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ &lt;jsp:param &hellip;. /&gt; }*</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;/jsp:forward&gt;</font></p><p><font size="4">&lt;jsp:forward&gt;动作只有一个属性page。</font></p><h5><font size="4">? page</font></h5><p><font size="4">指定请求被转向的资源的相对路径，该路径是相对于当前JSP页面的URL，也可以是经过表达式计算得到的相对URL。</font></p><p><font size="4">下面是使用&lt;jsp:forward&gt;动作的一个例子：</font></p><p><font size="4">&lt;%</font></p><p><font size="4">String command=request.getParameter(&quot;command&quot;);</font></p><p><font size="4">if(command.equals(&quot;reg&quot;))</font></p><p><font size="4">{</font></p><p><font size="4">%&gt;</font></p><p><font size="4">&lt;jsp:forward page=&quot;reg.jsp&quot;/&gt;</font></p><p><font size="4">&lt;%</font></p><p><font size="4">}</font></p><p><font size="4">else if(command.equals(&quot;logout&quot;))</font></p><p><font size="4">{</font></p><p><font size="4">%&gt;</font></p><p><font size="4">&lt;jsp:forward page=&quot;logout.jsp&quot;/&gt;</font></p><p><font size="4">&lt;%</font></p><p><font size="4">}</font></p><p><font size="4">else</font></p><p><font size="4">{</font></p><p><font size="4">%&gt;</font></p><p><font size="4">&lt;jsp:forward page=&quot;login.jsp&quot;/&gt;</font></p><p><font size="4">&lt;%</font></p><p><font size="4">}</font></p><p><font size="4">%&gt;</font></p><h4><a name="_Toc121640013"><font size="4">5</font></a><font size="4">．&lt;jsp:plugin&gt;，&lt;jsp:params&gt;和&lt;jsp:fallback&gt;</font></h4><p style="LINE-HEIGHT: 15.3pt"><font size="4">&lt;jsp:plugin&gt;动作用于产生与客户端浏览器相关的HTML标签（&lt;OBJECT&gt;或&lt;EMBED&gt;），从而导致在需要时下载Java插件（Plug-in）软件，并在插件中执行指定的Applet或JavaBean。&lt;jsp:plugin&gt;标签将根据客户端浏览器的类型被替换为&lt;object&gt;或&lt;embed&gt;标签。在&lt;jsp:plugin&gt;元素的内容中可以使用另外两个标签：&lt;jsp:params&gt;和&lt;jsp:fallback&gt;。</font></p><p style="LINE-HEIGHT: 15.3pt"><font size="4">&lt;jsp:params&gt;是&lt;jsp:plugin&gt;动作的一部分，并且只能在&lt;jsp:plugin&gt;动作中使用。&lt;jsp:params&gt;动作包含一个或多个&lt;jsp:param&gt;动作，用于向Applet或JavaBean提供参数。</font></p><p style="LINE-HEIGHT: 15.3pt"><font size="4">&lt;jsp:fallback&gt;是&lt;jsp:plugin&gt;动作的一部分，并且只能在&lt;jsp:plugin&gt;动作中使用，主要用于指定在Java插件不能启动时显示给用户的一段文字。如果插件能够启动，但是Applet或JavaBean没有发现或不能启动，那么浏览器会有一个出错信息提示。</font></p><p><font size="4">&lt;jsp:plugin&gt;动作的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:plugin type=&quot;bean|applet&quot;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">code=&quot;objectCode&quot;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">codebase=&quot;objectCodebase&quot; </font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ align=&quot;alignment&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ archive=&quot;archiveList&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ height=&quot;height&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ hspace=&quot;hspace&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ jreversion=&quot;jreversion&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ name=&quot;componentName&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ vspace=&quot;vspace&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ width=&quot;width&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ nspluginurl=&quot;url&quot; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ iepluginurl=&quot;url&quot; }&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ &lt;jsp:params&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ &lt;jsp:param name=&quot;paramName&quot; value= &quot;paramValue&quot; /&gt; }+</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;/jsp:params&gt; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">{ &lt;jsp:fallback&gt; arbitrary_text &lt;/jsp:fallback&gt; }</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;/jsp:plugin&gt;</font></p><p><font size="4">&lt;jsp:plugin&gt;动作有13个属性，如下所示。</font></p><h5><font size="4">? type=&quot;bean|applet&quot;</font></h5><p><font size="4">指定要执行的组件的类型，是JavaBean还是Applet。</font></p><h5><font size="4">? code=&quot;objectCode&quot;</font></h5><p><font size="4">指定要执行的组件的完整的类名，以.class结尾。该名字要么相对于codebase，要么相对于当前页面。</font></p><h5><font size="4">? codebase=&quot;objectCodebase&quot;</font></h5><p><font size="4">指定要执行的Java类所在的目录。</font></p><h5><font size="4">? align=&quot;alignment&quot;</font></h5><p><font size="4">指定组件对齐的方式。可以是下面的值：</font></p><p><font size="4">&mdash; left&mdash;&mdash;把组件放在网页左边，后面的文本会移至applet的右边。</font></p><p><font size="4">&mdash; right&mdash;&mdash;把组件放在网页右边，后面的文本会移至applet的左边。</font></p><p><font size="4">&mdash; bottom&mdash;&mdash;把组件的底部与当前行文本底部对齐。</font></p><p><font size="4">&mdash; top&mdash;&mdash;把组件的顶部与当前行顶部对齐。</font></p><p><font size="4">&mdash; texttop&mdash;&mdash;把组件的顶部与当前行文本顶部对齐。</font></p><p><font size="4">&mdash; middle&mdash;&mdash;把组件的中部与当前行基线对齐。 </font></p><p><font size="4">&mdash; absmiddle&mdash;&mdash;把组件的中部与当前行中部对齐。</font></p><p><font size="4">&mdash; baseline&mdash;&mdash;把组件的底部与当前行基线对齐。</font></p><p><font size="4">&mdash; absbottom&mdash;&mdash;把组件的底部与当前行底部对齐。</font></p><h5><font size="4">? archive=&quot;archiveList&quot;</font></h5><p><font size="4">指定以逗号分隔的Java归档文件列表。归档文件中可以包含组件要使用的类或需要的其他资源。</font></p><h5><font size="4">? height=&quot;height&quot;和width=&quot;width&quot;</font></h5><p><font size="4">指定组件的高度和宽度，以像素为单位。</font></p><h5><font size="4">? hspace=&quot;hspace&quot;和vspace=&quot;vspace&quot;</font></h5><p><font size="4">指定组件左右、上下留出的空间，以像素为单位。</font></p><h5><font size="4">? jreversion=&quot;jreversion&quot;</font></h5><p><font size="4">指定组件运行时需要的JRE版本，默认值为1.2。</font></p><h5><font size="4">? name=&quot;componentName&quot;</font></h5><p><font size="4">指定组件的名字。在编写脚本代码的时候，可以用该属性的值作为名字来引用这个组件。</font></p><h5><font size="4">? nspluginurl=&quot;url&quot;</font></h5><p><font size="4">指定对于Netscape Navigator，可以下载JRE插件的URL。默认情况由实现定义。</font></p><h5><font size="4">? iepluginurl=&quot;url&quot;</font></h5><p><font size="4">指定对于Internet Explorer，可以下载JRE插件的URL。默认情况由实现定义。</font></p><p><font size="4">下面是使用&lt;jsp:plugin&gt;动作的一个例子：</font></p><p style="TEXT-ALIGN: center" align="center"><font size="4">plugin.jsp</font></p><p><font size="4">&lt;%@ page contentType=&quot;text/html;charset=gb2312&quot; %&gt;</font></p><p><font size="4">&lt;jsp:plugin type=&quot;applet&quot; code=&quot;TestApplet.class&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;</font></p><p><font size="4">&lt;jsp:params&gt;</font></p><p><font size="4">&lt;jsp:param name=&quot;font&quot; value=&quot;楷体_GB2312&quot;/&gt;</font></p><p><font size="4">&lt;/jsp:params&gt;</font></p><p><font size="4">&lt;jsp:fallback&gt;您的浏览器不支持插件&lt;/jsp:fallback&gt;</font></p><p><font size="4">&lt;/jsp:plugin&gt;</font></p><p><font size="4"></font></p><p style="TEXT-ALIGN: center" align="center"><font size="4">TestApplet.java</font></p><p><font size="4">import java.applet.*;</font></p><p><font size="4">import java.awt.*;</font></p><p><font size="4"></font></p><p><font size="4">public class TestApplet extends Applet</font></p><p><font size="4">{</font></p><p><font size="4">String strFont;</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">public void init()</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">{</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">strFont=getParameter(&quot;font&quot;);</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">}</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4"></font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">public void paint(Graphics g)</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">{</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">Font f=new Font(strFont,Font.BOLD,30);</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">g.setFont(f);</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">g.setColor(Color.blue);</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">g.drawString(&quot;这是使用&lt;jsp:plugin&gt;动作元素的例子&quot;,0,30);</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">}</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">}</font></p><h4><a name="_Toc121640014"><font size="4">6</font></a><font size="4">．&lt;jsp:element&gt;</font></h4><p><font size="4">这个动作用于动态定义一个XML元素的标签。在&lt;jsp:element&gt;中，可以包含&lt;jsp:attributee&gt;和&lt;jsp:body&gt;。</font></p><p><font size="4">&lt;jsp:element&gt;动作的语法如下：</font></p><p style="BACKGROUND: #e0e0e0; LINE-HEIGHT: 15.3pt"><font size="4">&lt;jsp:element name=&quot;name&quot;&gt;</font></p><p style="BACKGROUND: #e0e0e0; LINE-HEIGHT: 15.3pt"><font size="4">optional body</font></p><p style="BACKGROUND: #e0e0e0; LINE-HEIGHT: 15.3pt"><font size="4">&lt;/jsp:element&gt;</font></p><p><font size="4">或</font></p><p style="BACKGROUND: #e0e0e0; LINE-HEIGHT: 15.3pt"><font size="4">&lt;jsp:element name=&quot;name&quot;&gt;</font></p><p style="BACKGROUND: #e0e0e0; LINE-HEIGHT: 15.3pt"><font size="4">jsp:attribute*</font></p><p style="BACKGROUND: #e0e0e0; LINE-HEIGHT: 15.3pt"><font size="4">jsp:body?</font></p><p style="BACKGROUND: #e0e0e0; LINE-HEIGHT: 15.3pt"><font size="4">&lt;/jsp:element&gt;</font></p><p><font size="4">&lt;jsp:element&gt;动作只有一个属性name。</font></p><h5><font size="4">? name</font></h5><p><font size="4">该属性用于指定动态产生的元素的名称。</font></p><p><font size="4">我们看下面两个例子。</font></p><p><font size="4">例1：</font></p><p><font size="4">&lt;jsp:element name=&quot;football&quot;/&gt;</font></p><p><font size="4">执行后将产生一个空元素：</font></p><p><font size="4">&lt;football/&gt;</font></p><p><font size="4">例2：</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">&lt;jsp:element name=&quot;employee&quot;&gt;</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">&lt;jsp:attribute name=&quot;name&quot;&gt;张三&lt;/jsp:attribute&gt;</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">&lt;jsp:body&gt;张三是销售部的经理&lt;/jsp:body&gt;</font></p><p style="LINE-HEIGHT: 12.3pt"><font size="4">&lt;/jsp:element&gt;</font></p><p><font size="4">执行后将产生一个包含属性和内容的元素：</font></p><p><font size="4">&lt;employee name=&quot;张三&quot;&gt;张三是销售部的经理&lt;/employee&gt;</font></p><h4><a name="_Toc121640015"><font size="4">7</font></a><font size="4">．&lt;jsp:attribute&gt;</font></h4><p><font size="4">&lt;jsp:attribute&gt;动作主要有两个用途：一是用于在XML元素的内容中定义一个动作属性的值。二是在&lt;jsp:element&gt;动作中使用，指定输出元素的属性。</font></p><p><font size="4">&lt;jsp:attribute&gt;动作的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:attribute name=&quot;name&quot; trim=&quot;true|false&quot;&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">optional body</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;/jsp:attribute&gt;</font></p><p><font size="4">&lt;jsp:attribute&gt;动作有两个属性：name和trim。</font></p><h5><font size="4">? name</font></h5><p><font size="4">用于指定元素属性的名称。</font></p><h5><font size="4">? trim</font></h5><p><font size="4">用于指定在&lt;jsp:attribute&gt;元素的内容前后出现的空白（包括空格、回车、换行、制表符）是否被JSP容器忽略。如果为true，则忽略；如果为false，则保留。默认值是true。</font></p><p><font size="4">下面两个例子，分别示范了&lt;jsp: attribute&gt;动作的两种用途。</font></p><p><font size="4">例1：</font></p><p><font size="4">&lt;jsp:forward&gt;</font></p><p><font size="4">&lt;jsp:attribute name=&quot;page&quot;&gt;reg.jsp&lt;/jsp:attribute&gt;</font></p><p><font size="4">&lt;/jsp:forward&gt;</font></p><p><font size="4">其作用和</font></p><p><font size="4">&lt;jsp:forward page=&quot;reg.jsp&quot;/&gt;</font></p><p><font size="4">是一样的。</font></p><p><font size="4">例2：</font></p><p><font size="4">见&lt;jsp:element&gt;一节中的例2。</font></p><h4><a name="_Toc121640016"><font size="4">8</font></a><font size="4">．&lt;jsp:body&gt;</font></h4><p><font size="4">这个动作用于定义元素的内容，用法见&lt;jsp:element&gt;一节中的例2。&lt;jsp:body&gt;动作没有任何的属性，它的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:body&gt;</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">optional body</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;/jsp:body&gt;</font></p><h4><a name="_Toc121640017"><font size="4">9</font></a><font size="4">．&lt;jsp:text&gt;</font></h4><p><font size="4">这个动作用于封装模板数据，它可以在模板数据允许出现的任何地方使用。&lt;jsp:text&gt;元素的作用和在JSP页面中直接书写模板数据一样。这个动作没有属性，它的语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;jsp:text&gt; template data &lt;/jsp:text&gt;</font></p><p><font size="4">在&lt;jsp:text&gt;动作中不能嵌套其他的动作和脚本元素，但是可以有EL表达式。对于下面的例子：</font></p><p><font size="4">&lt;jsp:text&gt;Hello World!&lt;/jsp:text&gt;</font></p><p><font size="4">执行后将产生输出：</font></p><p><font size="4">Hello World!</font></p><h4><a name="_Toc121640018"><font size="4">10</font></a><font size="4">．&lt;jsp:output&gt;</font></h4><p><font size="4">&lt;jsp:output&gt;动作只能在JSP文档和以XML语法编写的标签文件中使用，主要用于输出XML声明和文档类型声明。<strong>所谓</strong><strong>JSP</strong><strong>文档，是指使用XML</strong><strong>语法编写的JSP</strong><strong>页面。</strong>这意味着JSP文档是格式良好的、结构化的文档（参见12.8节）。</font></p><h4><a name="_Toc121640019"><font size="4">11</font></a><font size="4">．&lt;jsp:invoke&gt;和&lt;jsp:doBody&gt;</font></h4><p><font size="4">&lt;js:invoke&gt;和&lt;jsp:doBody&gt;动作元素只能在标签文件中使用。关于这两个元素的用法，请参见第18章。</font></p><h4><a name="_Toc121640020"><font size="4">12</font></a><font size="4">．其他标准动作</font></h4><p><font size="4">&lt;jsp:root&gt;，&lt;jsp:declaration&gt;，&lt;jsp:scriptlet&gt;和&lt;jsp:expression&gt;四个动作元素以XML语法格式来描述JSP页面。关于这四个元素的用法，参见12.8节。</font></p><h3><a name="_Toc121640021"></a>12.3.4 注释</h3><p><font size="4">在JSP页面中，可以使用两种类型的注释。一种是HTML注释，这种注释可以在客户端看到；一种是为JSP页面本身所做的注释，通常是给程序员看的，我们称为JSP注释。</font></p><h5><font size="4">? HTML注释</font></h5><p><font size="4">语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;!-- comments &hellip; --&gt;</font></p><p><font size="4">在HTML注释中，可以包含动态的内容，这些动态的内容将被JSP容器处理，然后将处理的结果作为注释的一部分。我们看下面的例子：</font></p><p><font size="4">&lt;!--这是新闻部分--&gt;</font></p><p><font size="4">&lt;!-- 1+1 = &lt;%= 1+1 %&gt; --&gt;</font></p><p><font size="4">在客户端浏览器中，通过查看源文件，可以看到如下的输出：</font></p><p><font size="4">&lt;!-- 这是新闻部分 --&gt;</font></p><p><font size="4">&lt;!-- 1+1 = 2 --&gt;</font></p><h5><font size="4">? JSP注释</font></h5><p><font size="4">语法如下：</font></p><p style="BACKGROUND: #e0e0e0"><font size="4">&lt;%-- comments --%&gt;</font></p><p><font size="4">JSP容器将完全忽略这种注释。这种注释对开发人员是非常有用的，可以在JSP页面中对代码的功能做注释，而不用担心会被发送到客户端。另外，在脚本段中，我们也可以使用Java语言本身的注释机制，例如：</font></p><p><font size="4">&lt;% //comments %&gt;</font></p><p><font size="4">&lt;% /*comments*/ %&gt;</font></p><p><font size="4">&lt;% /**comments*/ %&gt;</font></p><p><font size="4">下面是一个使用JSP注释的例子：</font></p><p><font size="4">&lt;%-- 这个方法用于完成对字符串的转换 --%&gt;</font></p>
</body>
</html>
